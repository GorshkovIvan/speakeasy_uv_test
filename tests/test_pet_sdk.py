"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import os
from petstore import Petstore, models
from tests.test_client import create_test_http_client


def test_pet_sdk_update_pet():
    test_http_client = create_test_http_client("updatePet")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.update_pet(
            name="doggie",
            photo_urls=[
                "<value 1>",
            ],
            id=10,
            category={
                "id": 1,
                "name": "Dogs",
            },
        )
        assert res is not None
        assert res == models.Pet(
            id=10,
            name="doggie",
            category=models.Category(
                id=1,
                name="Dogs",
            ),
            photo_urls=[],
        )


def test_pet_sdk_add_pet():
    test_http_client = create_test_http_client("addPet")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.add_pet(
            name="doggie",
            photo_urls=[
                "<value 1>",
                "<value 2>",
                "<value 3>",
            ],
            id=10,
            category={
                "id": 1,
                "name": "Dogs",
            },
        )
        assert res is not None
        assert res == models.Pet(
            id=10,
            name="doggie",
            category=models.Category(
                id=1,
                name="Dogs",
            ),
            photo_urls=[
                "<value 1>",
            ],
        )


def test_pet_sdk_find_pets_by_status():
    test_http_client = create_test_http_client("findPetsByStatus")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.find_pets_by_status(
            status=models.FindPetsByStatusStatus.AVAILABLE
        )
        assert res is not None
        assert res == [
            models.Pet(
                id=10,
                name="doggie",
                category=models.Category(
                    id=1,
                    name="Dogs",
                ),
                photo_urls=[
                    "<value 1>",
                    "<value 2>",
                ],
            ),
        ]


def test_pet_sdk_find_pets_by_tags():
    test_http_client = create_test_http_client("findPetsByTags")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.find_pets_by_tags()
        assert res is not None
        assert res == [
            models.Pet(
                id=10,
                name="doggie",
                category=models.Category(
                    id=1,
                    name="Dogs",
                ),
                photo_urls=[],
            ),
        ]


def test_pet_sdk_get_pet_by_id():
    test_http_client = create_test_http_client("getPetById")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.get_pet_by_id(pet_id=311674)
        assert res is not None
        assert res == models.Pet(
            id=10,
            name="doggie",
            category=models.Category(
                id=1,
                name="Dogs",
            ),
            photo_urls=[
                "<value 1>",
            ],
        )


def test_pet_sdk_delete_pet():
    test_http_client = create_test_http_client("deletePet")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.delete_pet(pet_id=818965)
        assert res is not None
        assert res == models.Pet(
            id=10,
            name="doggie",
            category=models.Category(
                id=1,
                name="Dogs",
            ),
            photo_urls=[],
        )


def test_pet_sdk_upload_file():
    test_http_client = create_test_http_client("uploadFile")

    with Petstore(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        api_key=os.getenv("PETSTORE_API_KEY", "value"),
    ) as p_client:
        assert p_client is not None

        res = p_client.pet.upload_file(pet_id=150516)
        assert res is not None
        assert res == models.APIResponse()
